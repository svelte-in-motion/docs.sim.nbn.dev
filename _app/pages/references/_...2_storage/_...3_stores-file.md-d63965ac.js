import{S as Qs,i as Rs,s as Ts,e as E,t as f,k as d,w as p,c as b,a as F,h as $,d as l,m as u,x as o,b as B,g as i,M as m,y as t,j as Vs,q as r,o as D,B as c,_ as Xs}from"../../../chunks/index-fdc571c5.js";import{f as Ys}from"../../../chunks/scroll-fc938a7a.js";import{C as P}from"../../../chunks/CodeFence-bf275b3f.js";import{C as g}from"../../../chunks/CodeInline-03f5d050.js";import{L as ms}from"../../../chunks/Link-d2aa795f.js";import"../../../chunks/singletons-01f6dffe.js";import"../../../chunks/contexts-ecb88871.js";function Zs(C){let e;return{c(){e=f("Svelte Stores")},l(a){e=$(a,"Svelte Stores")},m(a,y){i(a,e,y)},d(a){a&&l(e)}}}function sn(C){let e;return{c(){e=f("#")},l(a){e=$(a,"#")},m(a,y){i(a,e,y)},d(a){a&&l(e)}}}function nn(C){let e;return{c(){e=f("#")},l(a){e=$(a,"#")},m(a,y){i(a,e,y)},d(a){a&&l(e)}}}function an(C){let e;return{c(){e=f("#")},l(a){e=$(a,"#")},m(a,y){i(a,e,y)},d(a){a&&l(e)}}}function en(C){let e;return{c(){e=f("#")},l(a){e=$(a,"#")},m(a,y){i(a,e,y)},d(a){a&&l(e)}}}function ln(C){let e;return{c(){e=f("#")},l(a){e=$(a,"#")},m(a,y){i(a,e,y)},d(a){a&&l(e)}}}function pn(C){let e,a=C[0].title+"",y,fs,_,G,Ss,J,Is,H,Ps,_s,q,U,Hs,Es,K,w,W,Us,N,bs,O,k,Q,Ws,R,Ls,Fs,T,v,L,js,V,ws,X,Y,Z,Ms,vs,ss,x,j,zs,ns,xs,as,S,es,Gs,ls,Js,As,ps,A,M,Ks,os,hs,ts,I,rs,Ns,Ds,Os,Bs,cs,ds;return G=new g({props:{code:"file_binary"}}),J=new g({props:{code:"file_text"}}),H=new ms({props:{href:"https://svelte.dev/docs#run-time-svelte-store-writable",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[Zs]},$$scope:{ctx:C}}}),U=new ms({props:{class:"header-anchor",href:"#imports","aria-hidden":"true",$$slots:{default:[sn]},$$scope:{ctx:C}}}),K=new P({props:{lang:"typescript",ext:"ts",linesCount:7,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">file_binary</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">file_text</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">preload_binary</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">preload_text</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/core&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),W=new ms({props:{class:"header-anchor",href:"#file-binary","aria-hidden":"true",$$slots:{default:[nn]},$$scope:{ctx:C}}}),N=new g({props:{code:"file_binary"}}),O=new P({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">file_binary</span><span style="color: #D4D4D4">: (</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">IDriver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">file_path</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">debounce</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4"> = </span><span style="color: #B5CEA8">250</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">Writable</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">Uint8Array</span><span style="color: #D4D4D4">&gt;;</span></span>
<span class="line"></span></code></pre>`}}),Q=new g({props:{code:"file_binary"}}),R=new g({props:{code:"Uint8Array"}}),T=new P({props:{lang:"svelte",ext:"svelte",linesCount:13,code:`<pre><code><span class="line"><span style="color: #808080">&lt;</span><span style="color: #569CD6">script</span><span style="color: #808080">&gt;</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">file_binary</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/storage&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">driver</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">get_driver_from_somewhere</span><span style="color: #D4D4D4">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">file_store</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">file_binary</span><span style="color: #D4D4D4">(</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #CE9178">&quot;/path/to/binary/file&quot;</span></span>
<span class="line"><span style="color: #D4D4D4">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #C8C8C8">$</span><span style="color: #D4D4D4">: </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">($</span><span style="color: #9CDCFE">file_store</span><span style="color: #D4D4D4">);</span></span>
<span class="line"><span style="color: #808080">&lt;/</span><span style="color: #569CD6">script</span><span style="color: #808080">&gt;</span></span>
<span class="line"></span></code></pre>`}}),L=new ms({props:{class:"header-anchor",href:"#file-text","aria-hidden":"true",$$slots:{default:[an]},$$scope:{ctx:C}}}),V=new g({props:{code:"file_text"}}),X=new P({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">file_text</span><span style="color: #D4D4D4">: (</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">IDriver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">file_path</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">debounce</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4"> = </span><span style="color: #B5CEA8">250</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">Writable</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">&gt;;</span></span>
<span class="line"></span></code></pre>`}}),Z=new g({props:{code:"file_text"}}),ss=new P({props:{lang:"svelte",ext:"svelte",linesCount:15,code:`<pre><code><span class="line"><span style="color: #808080">&lt;</span><span style="color: #569CD6">script</span><span style="color: #808080">&gt;</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">file_text</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/storage&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">driver</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">get_driver_from_somewhere</span><span style="color: #D4D4D4">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">file_store</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">file_text</span><span style="color: #D4D4D4">(</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #CE9178">&quot;/path/to/file.txt&quot;</span></span>
<span class="line"><span style="color: #D4D4D4">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    $</span><span style="color: #9CDCFE">file_store</span><span style="color: #D4D4D4"> = </span><span style="color: #CE9178">&quot;hello world!&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #C8C8C8">$</span><span style="color: #D4D4D4">: </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">($</span><span style="color: #9CDCFE">file_store</span><span style="color: #D4D4D4">); </span><span style="color: #6A9955">// \`hello world!\`</span></span>
<span class="line"><span style="color: #808080">&lt;/</span><span style="color: #569CD6">script</span><span style="color: #808080">&gt;</span></span>
<span class="line"></span></code></pre>`}}),j=new ms({props:{class:"header-anchor",href:"#preload-binary","aria-hidden":"true",$$slots:{default:[en]},$$scope:{ctx:C}}}),ns=new g({props:{code:"preload_binary"}}),as=new P({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">preload_binary</span><span style="color: #D4D4D4">: (</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">IDriver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">file_path</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">debounce</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4"> = </span><span style="color: #B5CEA8">250</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">Promise</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">Writable</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">Uint8Array</span><span style="color: #D4D4D4">&gt;&gt;;</span></span>
<span class="line"></span></code></pre>`}}),es=new g({props:{code:"preload_binary"}}),ls=new g({props:{code:"file_binary"}}),ps=new P({props:{lang:"typescript",ext:"ts",linesCount:11,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">preload_binary</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/storage&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">driver</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">get_driver_from_somewhere</span><span style="color: #D4D4D4">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">file_store</span><span style="color: #D4D4D4"> = </span><span style="color: #C586C0">await</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">preload_binary</span><span style="color: #D4D4D4">(</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #CE9178">&quot;/path/to/binary/file&quot;</span></span>
<span class="line"><span style="color: #D4D4D4">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">file_store</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">subscribe</span><span style="color: #D4D4D4">((</span><span style="color: #9CDCFE">buffer</span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">buffer</span><span style="color: #D4D4D4">));</span></span>
<span class="line"></span></code></pre>`}}),M=new ms({props:{class:"header-anchor",href:"#preload-text","aria-hidden":"true",$$slots:{default:[ln]},$$scope:{ctx:C}}}),os=new g({props:{code:"preload_text"}}),ts=new P({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">preload_text</span><span style="color: #D4D4D4">: (</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">IDriver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">file_path</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">debounce</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4"> = </span><span style="color: #B5CEA8">250</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">Promise</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">Writable</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">&gt;&gt;;</span></span>
<span class="line"></span></code></pre>`}}),rs=new g({props:{code:"preload_text"}}),Ds=new g({props:{code:"file_text"}}),cs=new P({props:{lang:"typescript",ext:"ts",linesCount:11,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">preload_text</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/storage&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">driver</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">get_driver_from_somewhere</span><span style="color: #D4D4D4">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">file_store</span><span style="color: #D4D4D4"> = </span><span style="color: #C586C0">await</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">preload_text</span><span style="color: #D4D4D4">(</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">driver</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #CE9178">&quot;/path/to/file.txt&quot;</span></span>
<span class="line"><span style="color: #D4D4D4">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">file_store</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">subscribe</span><span style="color: #D4D4D4">((</span><span style="color: #9CDCFE">text</span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">text</span><span style="color: #D4D4D4">));</span></span>
<span class="line"></span></code></pre>`}}),{c(){e=E("h1"),y=f(a),fs=d(),_=E("p"),p(G.$$.fragment),Ss=f(" and "),p(J.$$.fragment),Is=f(" are "),p(H.$$.fragment),Ps=f(" that reactively replicate a file's content to memory. Allowing Components to read / update a file's content like any other Store."),_s=d(),q=E("h2"),p(U.$$.fragment),Hs=f(" Imports"),Es=d(),p(K.$$.fragment),w=E("h2"),p(W.$$.fragment),Us=d(),p(N.$$.fragment),bs=d(),p(O.$$.fragment),k=E("p"),p(Q.$$.fragment),Ws=f(" allows reading / updating a file's content with a basic "),p(R.$$.fragment),Ls=f("-compatible buffer."),Fs=d(),p(T.$$.fragment),v=E("h2"),p(L.$$.fragment),js=d(),p(V.$$.fragment),ws=d(),p(X.$$.fragment),Y=E("p"),p(Z.$$.fragment),Ms=f(" allows reading / updating a file's content as encoded text."),vs=d(),p(ss.$$.fragment),x=E("h2"),p(j.$$.fragment),zs=d(),p(ns.$$.fragment),xs=d(),p(as.$$.fragment),S=E("p"),p(es.$$.fragment),Gs=f(" is a wrapper around "),p(ls.$$.fragment),Js=f(" that awaits until the Store has had its first read before returning."),As=d(),p(ps.$$.fragment),A=E("h2"),p(M.$$.fragment),Ks=d(),p(os.$$.fragment),hs=d(),p(ts.$$.fragment),I=E("p"),p(rs.$$.fragment),Ns=f(" is a wrapper around "),p(Ds.$$.fragment),Os=f(" that awaits until the Store has had its first read before returning."),Bs=d(),p(cs.$$.fragment),this.h()},l(s){e=b(s,"H1",{});var n=F(e);y=$(n,a),n.forEach(l),fs=u(s),_=b(s,"P",{});var h=F(_);o(G.$$.fragment,h),Ss=$(h," and "),o(J.$$.fragment,h),Is=$(h," are "),o(H.$$.fragment,h),Ps=$(h," that reactively replicate a file's content to memory. Allowing Components to read / update a file's content like any other Store."),h.forEach(l),_s=u(s),q=b(s,"H2",{id:!0,tabindex:!0});var $s=F(q);o(U.$$.fragment,$s),Hs=$($s," Imports"),$s.forEach(l),Es=u(s),o(K.$$.fragment,s),w=b(s,"H2",{id:!0,tabindex:!0});var is=F(w);o(W.$$.fragment,is),Us=u(is),o(N.$$.fragment,is),is.forEach(l),bs=u(s),o(O.$$.fragment,s),k=b(s,"P",{});var z=F(k);o(Q.$$.fragment,z),Ws=$(z," allows reading / updating a file's content with a basic "),o(R.$$.fragment,z),Ls=$(z,"-compatible buffer."),z.forEach(l),Fs=u(s),o(T.$$.fragment,s),v=b(s,"H2",{id:!0,tabindex:!0});var ys=F(v);o(L.$$.fragment,ys),js=u(ys),o(V.$$.fragment,ys),ys.forEach(l),ws=u(s),o(X.$$.fragment,s),Y=b(s,"P",{});var Cs=F(Y);o(Z.$$.fragment,Cs),Ms=$(Cs," allows reading / updating a file's content as encoded text."),Cs.forEach(l),vs=u(s),o(ss.$$.fragment,s),x=b(s,"H2",{id:!0,tabindex:!0});var qs=F(x);o(j.$$.fragment,qs),zs=u(qs),o(ns.$$.fragment,qs),qs.forEach(l),xs=u(s),o(as.$$.fragment,s),S=b(s,"P",{});var us=F(S);o(es.$$.fragment,us),Gs=$(us," is a wrapper around "),o(ls.$$.fragment,us),Js=$(us," that awaits until the Store has had its first read before returning."),us.forEach(l),As=u(s),o(ps.$$.fragment,s),A=b(s,"H2",{id:!0,tabindex:!0});var ks=F(A);o(M.$$.fragment,ks),Ks=u(ks),o(os.$$.fragment,ks),ks.forEach(l),hs=u(s),o(ts.$$.fragment,s),I=b(s,"P",{});var gs=F(I);o(rs.$$.fragment,gs),Ns=$(gs," is a wrapper around "),o(Ds.$$.fragment,gs),Os=$(gs," that awaits until the Store has had its first read before returning."),gs.forEach(l),Bs=u(s),o(cs.$$.fragment,s),this.h()},h(){B(q,"id","imports"),B(q,"tabindex","-1"),B(w,"id","file-binary"),B(w,"tabindex","-1"),B(v,"id","file-text"),B(v,"tabindex","-1"),B(x,"id","preload-binary"),B(x,"tabindex","-1"),B(A,"id","preload-text"),B(A,"tabindex","-1")},m(s,n){i(s,e,n),m(e,y),i(s,fs,n),i(s,_,n),t(G,_,null),m(_,Ss),t(J,_,null),m(_,Is),t(H,_,null),m(_,Ps),i(s,_s,n),i(s,q,n),t(U,q,null),m(q,Hs),i(s,Es,n),t(K,s,n),i(s,w,n),t(W,w,null),m(w,Us),t(N,w,null),i(s,bs,n),t(O,s,n),i(s,k,n),t(Q,k,null),m(k,Ws),t(R,k,null),m(k,Ls),i(s,Fs,n),t(T,s,n),i(s,v,n),t(L,v,null),m(v,js),t(V,v,null),i(s,ws,n),t(X,s,n),i(s,Y,n),t(Z,Y,null),m(Y,Ms),i(s,vs,n),t(ss,s,n),i(s,x,n),t(j,x,null),m(x,zs),t(ns,x,null),i(s,xs,n),t(as,s,n),i(s,S,n),t(es,S,null),m(S,Gs),t(ls,S,null),m(S,Js),i(s,As,n),t(ps,s,n),i(s,A,n),t(M,A,null),m(A,Ks),t(os,A,null),i(s,hs,n),t(ts,s,n),i(s,I,n),t(rs,I,null),m(I,Ns),t(Ds,I,null),m(I,Os),i(s,Bs,n),t(cs,s,n),ds=!0},p(s,[n]){(!ds||n&1)&&a!==(a=s[0].title+"")&&Vs(y,a);const h={};n&2&&(h.$$scope={dirty:n,ctx:s}),H.$set(h);const $s={};n&2&&($s.$$scope={dirty:n,ctx:s}),U.$set($s);const is={};n&2&&(is.$$scope={dirty:n,ctx:s}),W.$set(is);const z={};n&2&&(z.$$scope={dirty:n,ctx:s}),L.$set(z);const ys={};n&2&&(ys.$$scope={dirty:n,ctx:s}),j.$set(ys);const Cs={};n&2&&(Cs.$$scope={dirty:n,ctx:s}),M.$set(Cs)},i(s){ds||(r(G.$$.fragment,s),r(J.$$.fragment,s),r(H.$$.fragment,s),r(U.$$.fragment,s),r(K.$$.fragment,s),r(W.$$.fragment,s),r(N.$$.fragment,s),r(O.$$.fragment,s),r(Q.$$.fragment,s),r(R.$$.fragment,s),r(T.$$.fragment,s),r(L.$$.fragment,s),r(V.$$.fragment,s),r(X.$$.fragment,s),r(Z.$$.fragment,s),r(ss.$$.fragment,s),r(j.$$.fragment,s),r(ns.$$.fragment,s),r(as.$$.fragment,s),r(es.$$.fragment,s),r(ls.$$.fragment,s),r(ps.$$.fragment,s),r(M.$$.fragment,s),r(os.$$.fragment,s),r(ts.$$.fragment,s),r(rs.$$.fragment,s),r(Ds.$$.fragment,s),r(cs.$$.fragment,s),ds=!0)},o(s){D(G.$$.fragment,s),D(J.$$.fragment,s),D(H.$$.fragment,s),D(U.$$.fragment,s),D(K.$$.fragment,s),D(W.$$.fragment,s),D(N.$$.fragment,s),D(O.$$.fragment,s),D(Q.$$.fragment,s),D(R.$$.fragment,s),D(T.$$.fragment,s),D(L.$$.fragment,s),D(V.$$.fragment,s),D(X.$$.fragment,s),D(Z.$$.fragment,s),D(ss.$$.fragment,s),D(j.$$.fragment,s),D(ns.$$.fragment,s),D(as.$$.fragment,s),D(es.$$.fragment,s),D(ls.$$.fragment,s),D(ps.$$.fragment,s),D(M.$$.fragment,s),D(os.$$.fragment,s),D(ts.$$.fragment,s),D(rs.$$.fragment,s),D(Ds.$$.fragment,s),D(cs.$$.fragment,s),ds=!1},d(s){s&&l(e),s&&l(fs),s&&l(_),c(G),c(J),c(H),s&&l(_s),s&&l(q),c(U),s&&l(Es),c(K,s),s&&l(w),c(W),c(N),s&&l(bs),c(O,s),s&&l(k),c(Q),c(R),s&&l(Fs),c(T,s),s&&l(v),c(L),c(V),s&&l(ws),c(X,s),s&&l(Y),c(Z),s&&l(vs),c(ss,s),s&&l(x),c(j),c(ns),s&&l(xs),c(as,s),s&&l(S),c(es),c(ls),s&&l(As),c(ps,s),s&&l(A),c(M),c(os),s&&l(hs),c(ts,s),s&&l(I),c(rs),c(Ds),s&&l(Bs),c(cs,s)}}}function on(C,e,a){let y;return Xs(C,Ys,fs=>a(0,y=fs)),[y]}class Cn extends Qs{constructor(e){super(),Rs(this,e,on,pn,Ts,{})}}export{Cn as default};
