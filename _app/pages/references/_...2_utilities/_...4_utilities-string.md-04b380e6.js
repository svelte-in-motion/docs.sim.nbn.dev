import{S as qs,i as Fs,s as ks,e as x,t as m,k as u,w as o,c as v,a as w,h as y,d as a,m as C,x as r,b as S,g as l,M as d,y as c,j as Bs,q as i,o as D,B as $,_ as Hs,E as Is}from"../../../chunks/index-fdc571c5.js";import{f as Rs}from"../../../chunks/scroll-fc938a7a.js";import{C as Y}from"../../../chunks/CodeFence-bf275b3f.js";import{C as ns}from"../../../chunks/CodeInline-03f5d050.js";import{L as us}from"../../../chunks/Link-d2aa795f.js";import{A as Ss}from"../../../chunks/Admonition-ec3c5d9c.js";import"../../../chunks/singletons-01f6dffe.js";import"../../../chunks/contexts-ecb88871.js";function Ps(f){let e;return{c(){e=m("#")},l(t){e=y(t,"#")},m(t,p){l(t,e,p)},d(t){t&&a(e)}}}function Ts(f){let e;return{c(){e=m("#")},l(t){e=y(t,"#")},m(t,p){l(t,e,p)},d(t){t&&a(e)}}}function Ms(f){let e;return{c(){e=m("#")},l(t){e=y(t,"#")},m(t,p){l(t,e,p)},d(t){t&&a(e)}}}function Ls(f){let e;return{c(){e=m("#")},l(t){e=y(t,"#")},m(t,p){l(t,e,p)},d(t){t&&a(e)}}}function Ws(f){let e,t;return{c(){e=x("p"),t=m("The returned number is not guaranteed to be the same algorithm between Svelte-In-Motion versions!")},l(p){e=v(p,"P",{});var g=w(e);t=y(g,"The returned number is not guaranteed to be the same algorithm between Svelte-In-Motion versions!"),g.forEach(a)},m(p,g){l(p,e,g),d(e,t)},p:Is,d(p){p&&a(e)}}}function js(f){let e,t=f[0].title+"",p,g,Z,Cs,as,b,A,ds,ls,P,_,q,gs,T,ps,M,F,_s,L,hs,os,W,h,k,Es,j,rs,U,B,xs,z,vs,cs,G,E,H,ws,J,is,I,Ds,K,R,bs,N,As,$s,O,es;return A=new us({props:{class:"header-anchor",href:"#imports","aria-hidden":"true",$$slots:{default:[Ps]},$$scope:{ctx:f}}}),P=new Y({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">format_camel_case</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">format_slug</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">hash_string</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),q=new us({props:{class:"header-anchor",href:"#format-camel-case","aria-hidden":"true",$$slots:{default:[Ts]},$$scope:{ctx:f}}}),T=new ns({props:{code:"format_camel_case"}}),M=new Y({props:{lang:"typescript",ext:"ts",linesCount:4,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">format_camel_case</span><span style="color: #D4D4D4">: (</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">text</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),L=new ns({props:{code:"text"}}),W=new Y({props:{lang:"typescript",ext:"ts",linesCount:8,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">format_camel_case</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">format_camel_case</span><span style="color: #D4D4D4">(</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #CE9178">&quot;this-is-text-with-symbols-and-such&quot;</span></span>
<span class="line"><span style="color: #D4D4D4">    )</span></span>
<span class="line"><span style="color: #D4D4D4">); </span><span style="color: #6A9955">// \`thisIsTextWithSymbolsAndSuch\`</span></span>
<span class="line"></span></code></pre>`}}),k=new us({props:{class:"header-anchor",href:"#format-slug","aria-hidden":"true",$$slots:{default:[Ms]},$$scope:{ctx:f}}}),j=new ns({props:{code:"format_slug"}}),U=new Y({props:{lang:"typescript",ext:"ts",linesCount:2,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">format_slug</span><span style="color: #D4D4D4">: (</span><span style="color: #9CDCFE">text</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),z=new ns({props:{code:"text"}}),G=new Y({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">format_slug</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">format_slug</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;This is text, with symbols and such!&quot;</span><span style="color: #D4D4D4">)</span></span>
<span class="line"><span style="color: #D4D4D4">); </span><span style="color: #6A9955">// \`this-is-text-with-symbols-and-such\`</span></span>
<span class="line"></span></code></pre>`}}),H=new us({props:{class:"header-anchor",href:"#hash-string","aria-hidden":"true",$$slots:{default:[Ls]},$$scope:{ctx:f}}}),J=new ns({props:{code:"hash_string"}}),I=new Ss({props:{type:"warning",$$slots:{default:[Ws]},$$scope:{ctx:f}}}),K=new Y({props:{lang:"typescript",ext:"ts",linesCount:2,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">hash_string</span><span style="color: #D4D4D4">: (</span><span style="color: #9CDCFE">text</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),N=new ns({props:{code:"text"}}),O=new Y({props:{lang:"typescript",ext:"ts",linesCount:4,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">hash_string</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #DCDCAA">hash_string</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;Hello World&quot;</span><span style="color: #D4D4D4">)); </span><span style="color: #6A9955">// \`1661258373\`</span></span>
<span class="line"></span></code></pre>`}}),{c(){e=x("h1"),p=m(t),g=u(),Z=x("p"),Cs=m("Helper utilities for string handling related tasks are provided."),as=u(),b=x("h2"),o(A.$$.fragment),ds=m(" Imports"),ls=u(),o(P.$$.fragment),_=x("h2"),o(q.$$.fragment),gs=u(),o(T.$$.fragment),ps=u(),o(M.$$.fragment),F=x("p"),_s=m("Returns the "),o(L.$$.fragment),hs=m(" dash case string as a camel case string."),os=u(),o(W.$$.fragment),h=x("h2"),o(k.$$.fragment),Es=u(),o(j.$$.fragment),rs=u(),o(U.$$.fragment),B=x("p"),xs=m("Returns the "),o(z.$$.fragment),vs=m(" as a string stripped of symbols and converted to dash case."),cs=u(),o(G.$$.fragment),E=x("h2"),o(H.$$.fragment),ws=u(),o(J.$$.fragment),is=u(),o(I.$$.fragment),Ds=u(),o(K.$$.fragment),R=x("p"),bs=m("Returns an unsigned integer hash of the "),o(N.$$.fragment),As=m(" provided."),$s=u(),o(O.$$.fragment),this.h()},l(s){e=v(s,"H1",{});var n=w(e);p=y(n,t),n.forEach(a),g=C(s),Z=v(s,"P",{});var ts=w(Z);Cs=y(ts,"Helper utilities for string handling related tasks are provided."),ts.forEach(a),as=C(s),b=v(s,"H2",{id:!0,tabindex:!0});var ss=w(b);r(A.$$.fragment,ss),ds=y(ss," Imports"),ss.forEach(a),ls=C(s),r(P.$$.fragment,s),_=v(s,"H2",{id:!0,tabindex:!0});var Q=w(_);r(q.$$.fragment,Q),gs=C(Q),r(T.$$.fragment,Q),Q.forEach(a),ps=C(s),r(M.$$.fragment,s),F=v(s,"P",{});var V=w(F);_s=y(V,"Returns the "),r(L.$$.fragment,V),hs=y(V," dash case string as a camel case string."),V.forEach(a),os=C(s),r(W.$$.fragment,s),h=v(s,"H2",{id:!0,tabindex:!0});var X=w(h);r(k.$$.fragment,X),Es=C(X),r(j.$$.fragment,X),X.forEach(a),rs=C(s),r(U.$$.fragment,s),B=v(s,"P",{});var fs=w(B);xs=y(fs,"Returns the "),r(z.$$.fragment,fs),vs=y(fs," as a string stripped of symbols and converted to dash case."),fs.forEach(a),cs=C(s),r(G.$$.fragment,s),E=v(s,"H2",{id:!0,tabindex:!0});var ms=w(E);r(H.$$.fragment,ms),ws=C(ms),r(J.$$.fragment,ms),ms.forEach(a),is=C(s),r(I.$$.fragment,s),Ds=C(s),r(K.$$.fragment,s),R=v(s,"P",{});var ys=w(R);bs=y(ys,"Returns an unsigned integer hash of the "),r(N.$$.fragment,ys),As=y(ys," provided."),ys.forEach(a),$s=C(s),r(O.$$.fragment,s),this.h()},h(){S(b,"id","imports"),S(b,"tabindex","-1"),S(_,"id","format-camel-case"),S(_,"tabindex","-1"),S(h,"id","format-slug"),S(h,"tabindex","-1"),S(E,"id","hash-string"),S(E,"tabindex","-1")},m(s,n){l(s,e,n),d(e,p),l(s,g,n),l(s,Z,n),d(Z,Cs),l(s,as,n),l(s,b,n),c(A,b,null),d(b,ds),l(s,ls,n),c(P,s,n),l(s,_,n),c(q,_,null),d(_,gs),c(T,_,null),l(s,ps,n),c(M,s,n),l(s,F,n),d(F,_s),c(L,F,null),d(F,hs),l(s,os,n),c(W,s,n),l(s,h,n),c(k,h,null),d(h,Es),c(j,h,null),l(s,rs,n),c(U,s,n),l(s,B,n),d(B,xs),c(z,B,null),d(B,vs),l(s,cs,n),c(G,s,n),l(s,E,n),c(H,E,null),d(E,ws),c(J,E,null),l(s,is,n),c(I,s,n),l(s,Ds,n),c(K,s,n),l(s,R,n),d(R,bs),c(N,R,null),d(R,As),l(s,$s,n),c(O,s,n),es=!0},p(s,[n]){(!es||n&1)&&t!==(t=s[0].title+"")&&Bs(p,t);const ts={};n&2&&(ts.$$scope={dirty:n,ctx:s}),A.$set(ts);const ss={};n&2&&(ss.$$scope={dirty:n,ctx:s}),q.$set(ss);const Q={};n&2&&(Q.$$scope={dirty:n,ctx:s}),k.$set(Q);const V={};n&2&&(V.$$scope={dirty:n,ctx:s}),H.$set(V);const X={};n&2&&(X.$$scope={dirty:n,ctx:s}),I.$set(X)},i(s){es||(i(A.$$.fragment,s),i(P.$$.fragment,s),i(q.$$.fragment,s),i(T.$$.fragment,s),i(M.$$.fragment,s),i(L.$$.fragment,s),i(W.$$.fragment,s),i(k.$$.fragment,s),i(j.$$.fragment,s),i(U.$$.fragment,s),i(z.$$.fragment,s),i(G.$$.fragment,s),i(H.$$.fragment,s),i(J.$$.fragment,s),i(I.$$.fragment,s),i(K.$$.fragment,s),i(N.$$.fragment,s),i(O.$$.fragment,s),es=!0)},o(s){D(A.$$.fragment,s),D(P.$$.fragment,s),D(q.$$.fragment,s),D(T.$$.fragment,s),D(M.$$.fragment,s),D(L.$$.fragment,s),D(W.$$.fragment,s),D(k.$$.fragment,s),D(j.$$.fragment,s),D(U.$$.fragment,s),D(z.$$.fragment,s),D(G.$$.fragment,s),D(H.$$.fragment,s),D(J.$$.fragment,s),D(I.$$.fragment,s),D(K.$$.fragment,s),D(N.$$.fragment,s),D(O.$$.fragment,s),es=!1},d(s){s&&a(e),s&&a(g),s&&a(Z),s&&a(as),s&&a(b),$(A),s&&a(ls),$(P,s),s&&a(_),$(q),$(T),s&&a(ps),$(M,s),s&&a(F),$(L),s&&a(os),$(W,s),s&&a(h),$(k),$(j),s&&a(rs),$(U,s),s&&a(B),$(z),s&&a(cs),$(G,s),s&&a(E),$(H),$(J),s&&a(is),$(I,s),s&&a(Ds),$(K,s),s&&a(R),$(N),s&&a($s),$(O,s)}}}function Us(f,e,t){let p;return Hs(f,Rs,g=>t(0,p=g)),[p]}class Xs extends qs{constructor(e){super(),Fs(this,e,Us,js,ks,{})}}export{Xs as default};
