import{S as xs,i as Bs,s as ks,e as v,t as c,k as A,w as y,c as w,a as F,h as i,d as p,m as b,x as $,b as H,g as o,M as D,y as f,j as qs,q as m,o as u,B as C,_ as Rs,E as hs}from"../../../chunks/index-fdc571c5.js";import{f as Is}from"../../../chunks/scroll-fc938a7a.js";import{C as Y}from"../../../chunks/CodeFence-bf275b3f.js";import{C as ws}from"../../../chunks/CodeInline-03f5d050.js";import{L as os}from"../../../chunks/Link-d2aa795f.js";import{A as Fs}from"../../../chunks/Admonition-ec3c5d9c.js";import"../../../chunks/singletons-01f6dffe.js";import"../../../chunks/contexts-ecb88871.js";function Ts(t){let n;return{c(){n=c("#")},l(a){n=i(a,"#")},m(a,l){o(a,n,l)},d(a){a&&p(n)}}}function Us(t){let n;return{c(){n=c("#")},l(a){n=i(a,"#")},m(a,l){o(a,n,l)},d(a){a&&p(n)}}}function Ms(t){let n;return{c(){n=c("#")},l(a){n=i(a,"#")},m(a,l){o(a,n,l)},d(a){a&&p(n)}}}function Ss(t){let n,a,l,_,E;return{c(){n=v("p"),a=c("The returned UUID is not guaranteed to be cryptographically secure "),l=v("strong"),_=c("OR"),E=c(" even the same format between Svelte-In-Motion versions!")},l(d){n=w(d,"P",{});var r=F(n);a=i(r,"The returned UUID is not guaranteed to be cryptographically secure "),l=w(r,"STRONG",{});var g=F(l);_=i(g,"OR"),g.forEach(p),E=i(r," even the same format between Svelte-In-Motion versions!"),r.forEach(p)},m(d,r){o(d,n,r),D(n,a),D(n,l),D(l,_),D(n,E)},p:hs,d(d){d&&p(n)}}}function Hs(t){let n;return{c(){n=c("#")},l(a){n=i(a,"#")},m(a,l){o(a,n,l)},d(a){a&&p(n)}}}function Os(t){let n,a,l,_,E;return{c(){n=v("p"),a=c("The random number generator used is not guaranteed to be cryptographically secure "),l=v("strong"),_=c("OR"),E=c(" the same algorithm between Svelte-In-Motion versions!")},l(d){n=w(d,"P",{});var r=F(n);a=i(r,"The random number generator used is not guaranteed to be cryptographically secure "),l=w(r,"STRONG",{});var g=F(l);_=i(g,"OR"),g.forEach(p),E=i(r," the same algorithm between Svelte-In-Motion versions!"),r.forEach(p)},m(d,r){o(d,n,r),D(n,a),D(n,l),D(l,_),D(n,E)},p:hs,d(d){d&&p(n)}}}function Ps(t){let n;return{c(){n=c("Mersenne Twister")},l(a){n=i(a,"Mersenne Twister")},m(a,l){o(a,n,l)},d(a){a&&p(n)}}}function Gs(t){let n,a=t[0].title+"",l,_,E,d,r,g,k,Cs,ts,O,h,q,ds,P,rs,G,Z,gs,Ds,L,x,R,_s,N,cs,I,is,j,ss,Es,ys,z,B,T,As,J,$s,U,fs,K,M,bs,S,vs,ms,Q,es;return k=new os({props:{class:"header-anchor",href:"#imports","aria-hidden":"true",$$slots:{default:[Ts]},$$scope:{ctx:t}}}),O=new Y({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">generate_uint32</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">generate_uuid</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">random</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),q=new os({props:{class:"header-anchor",href:"#generate-uint32","aria-hidden":"true",$$slots:{default:[Us]},$$scope:{ctx:t}}}),P=new ws({props:{code:"generate_uint32"}}),G=new Y({props:{lang:"typescript",ext:"ts",linesCount:2,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">generate_uint32</span><span style="color: #D4D4D4">: () </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),L=new Y({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">generate_uint32</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">random_number</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">generate_uint32</span><span style="color: #D4D4D4">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">random_number</span><span style="color: #D4D4D4">); </span><span style="color: #6A9955">// \`3025249130\`</span></span>
<span class="line"></span></code></pre>`}}),R=new os({props:{class:"header-anchor",href:"#generate-uuid","aria-hidden":"true",$$slots:{default:[Ms]},$$scope:{ctx:t}}}),N=new ws({props:{code:"generate_uuid"}}),I=new Fs({props:{type:"warning",$$slots:{default:[Ss]},$$scope:{ctx:t}}}),j=new Y({props:{lang:"typescript",ext:"ts",linesCount:2,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">generate_uuid</span><span style="color: #D4D4D4">: () </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),z=new Y({props:{lang:"typescript",ext:"ts",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">generate_uuid</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">uuid</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">generate_uuid</span><span style="color: #D4D4D4">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">uuid</span><span style="color: #D4D4D4">); </span><span style="color: #6A9955">// \`b4173a75-5f2c-4f5d-b404-75cd1b3183aa\`</span></span>
<span class="line"></span></code></pre>`}}),T=new os({props:{class:"header-anchor",href:"#random","aria-hidden":"true",$$slots:{default:[Hs]},$$scope:{ctx:t}}}),J=new ws({props:{code:"random"}}),U=new Fs({props:{type:"warning",$$slots:{default:[Os]},$$scope:{ctx:t}}}),K=new Y({props:{lang:"typescript",ext:"ts",linesCount:12,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">interface</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">IRandomGenerator</span><span style="color: #D4D4D4"> {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">float</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">min</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">max</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">): </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">integer</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">min</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">max</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">): </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">next</span><span style="color: #D4D4D4">(): </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4">;</span></span>
<span class="line"><span style="color: #D4D4D4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">random</span><span style="color: #D4D4D4">: (</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">seed</span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0">number</span><span style="color: #D4D4D4"> | </span><span style="color: #4EC9B0">string</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">IRandomGenerator</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),S=new os({props:{href:"https://en.wikipedia.org/wiki/Mersenne_Twister",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[Ps]},$$scope:{ctx:t}}}),Q=new Y({props:{lang:"typescript",ext:"ts",linesCount:17,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">random</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">generator</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">random</span><span style="color: #D4D4D4">();</span></span>
<span class="line"><span style="color: #6A9955">// By default uses a random seed, you can however specifiy the seed via a \`number\` argument</span></span>
<span class="line"><span style="color: #6A9955">//</span></span>
<span class="line"><span style="color: #6A9955">// const generator = random(20391802231984)</span></span>
<span class="line"><span style="color: #6A9955">//</span></span>
<span class="line"><span style="color: #6A9955">// Or use a string argument, which will be hashed into a \`number\`</span></span>
<span class="line"><span style="color: #6A9955">//</span></span>
<span class="line"><span style="color: #6A9955">// const generator = random(&quot;my-seed&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">generator</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">next</span><span style="color: #D4D4D4">()); </span><span style="color: #6A9955">// \`0.6288223583251238\`</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">generator</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">integer</span><span style="color: #D4D4D4">(</span><span style="color: #B5CEA8">0</span><span style="color: #D4D4D4">, </span><span style="color: #B5CEA8">10</span><span style="color: #D4D4D4">)); </span><span style="color: #6A9955">// \`6.288223583251238\`</span></span>
<span class="line"></span>
<span class="line"><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">generator</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">float</span><span style="color: #D4D4D4">(</span><span style="color: #B5CEA8">0</span><span style="color: #D4D4D4">, </span><span style="color: #B5CEA8">10</span><span style="color: #D4D4D4">)); </span><span style="color: #6A9955">// \`6.288223583251238\`</span></span>
<span class="line"></span></code></pre>`}}),{c(){n=v("h1"),l=c(a),_=A(),E=v("p"),d=c("Helper utilities for random generation related tasks are provided."),r=A(),g=v("h2"),y(k.$$.fragment),Cs=c(" Imports"),ts=A(),y(O.$$.fragment),h=v("h2"),y(q.$$.fragment),ds=A(),y(P.$$.fragment),rs=A(),y(G.$$.fragment),Z=v("p"),gs=c("Returns a random unsigned 32-bit integer."),Ds=A(),y(L.$$.fragment),x=v("h2"),y(R.$$.fragment),_s=A(),y(N.$$.fragment),cs=A(),y(I.$$.fragment),is=A(),y(j.$$.fragment),ss=v("p"),Es=c("Returns a random UUID (universial unique identifier) to give items non-specific identities."),ys=A(),y(z.$$.fragment),B=v("h2"),y(T.$$.fragment),As=A(),y(J.$$.fragment),$s=A(),y(U.$$.fragment),fs=A(),y(K.$$.fragment),M=v("p"),bs=c("Returns a number generator based on "),y(S.$$.fragment),vs=c("."),ms=A(),y(Q.$$.fragment),this.h()},l(s){n=w(s,"H1",{});var e=F(n);l=i(e,a),e.forEach(p),_=b(s),E=w(s,"P",{});var as=F(E);d=i(as,"Helper utilities for random generation related tasks are provided."),as.forEach(p),r=b(s),g=w(s,"H2",{id:!0,tabindex:!0});var ns=F(g);$(k.$$.fragment,ns),Cs=i(ns," Imports"),ns.forEach(p),ts=b(s),$(O.$$.fragment,s),h=w(s,"H2",{id:!0,tabindex:!0});var V=F(h);$(q.$$.fragment,V),ds=b(V),$(P.$$.fragment,V),V.forEach(p),rs=b(s),$(G.$$.fragment,s),Z=w(s,"P",{});var ps=F(Z);gs=i(ps,"Returns a random unsigned 32-bit integer."),ps.forEach(p),Ds=b(s),$(L.$$.fragment,s),x=w(s,"H2",{id:!0,tabindex:!0});var W=F(x);$(R.$$.fragment,W),_s=b(W),$(N.$$.fragment,W),W.forEach(p),cs=b(s),$(I.$$.fragment,s),is=b(s),$(j.$$.fragment,s),ss=w(s,"P",{});var ls=F(ss);Es=i(ls,"Returns a random UUID (universial unique identifier) to give items non-specific identities."),ls.forEach(p),ys=b(s),$(z.$$.fragment,s),B=w(s,"H2",{id:!0,tabindex:!0});var X=F(B);$(T.$$.fragment,X),As=b(X),$(J.$$.fragment,X),X.forEach(p),$s=b(s),$(U.$$.fragment,s),fs=b(s),$(K.$$.fragment,s),M=w(s,"P",{});var us=F(M);bs=i(us,"Returns a number generator based on "),$(S.$$.fragment,us),vs=i(us,"."),us.forEach(p),ms=b(s),$(Q.$$.fragment,s),this.h()},h(){H(g,"id","imports"),H(g,"tabindex","-1"),H(h,"id","generate-uint32"),H(h,"tabindex","-1"),H(x,"id","generate-uuid"),H(x,"tabindex","-1"),H(B,"id","random"),H(B,"tabindex","-1")},m(s,e){o(s,n,e),D(n,l),o(s,_,e),o(s,E,e),D(E,d),o(s,r,e),o(s,g,e),f(k,g,null),D(g,Cs),o(s,ts,e),f(O,s,e),o(s,h,e),f(q,h,null),D(h,ds),f(P,h,null),o(s,rs,e),f(G,s,e),o(s,Z,e),D(Z,gs),o(s,Ds,e),f(L,s,e),o(s,x,e),f(R,x,null),D(x,_s),f(N,x,null),o(s,cs,e),f(I,s,e),o(s,is,e),f(j,s,e),o(s,ss,e),D(ss,Es),o(s,ys,e),f(z,s,e),o(s,B,e),f(T,B,null),D(B,As),f(J,B,null),o(s,$s,e),f(U,s,e),o(s,fs,e),f(K,s,e),o(s,M,e),D(M,bs),f(S,M,null),D(M,vs),o(s,ms,e),f(Q,s,e),es=!0},p(s,[e]){(!es||e&1)&&a!==(a=s[0].title+"")&&qs(l,a);const as={};e&2&&(as.$$scope={dirty:e,ctx:s}),k.$set(as);const ns={};e&2&&(ns.$$scope={dirty:e,ctx:s}),q.$set(ns);const V={};e&2&&(V.$$scope={dirty:e,ctx:s}),R.$set(V);const ps={};e&2&&(ps.$$scope={dirty:e,ctx:s}),I.$set(ps);const W={};e&2&&(W.$$scope={dirty:e,ctx:s}),T.$set(W);const ls={};e&2&&(ls.$$scope={dirty:e,ctx:s}),U.$set(ls);const X={};e&2&&(X.$$scope={dirty:e,ctx:s}),S.$set(X)},i(s){es||(m(k.$$.fragment,s),m(O.$$.fragment,s),m(q.$$.fragment,s),m(P.$$.fragment,s),m(G.$$.fragment,s),m(L.$$.fragment,s),m(R.$$.fragment,s),m(N.$$.fragment,s),m(I.$$.fragment,s),m(j.$$.fragment,s),m(z.$$.fragment,s),m(T.$$.fragment,s),m(J.$$.fragment,s),m(U.$$.fragment,s),m(K.$$.fragment,s),m(S.$$.fragment,s),m(Q.$$.fragment,s),es=!0)},o(s){u(k.$$.fragment,s),u(O.$$.fragment,s),u(q.$$.fragment,s),u(P.$$.fragment,s),u(G.$$.fragment,s),u(L.$$.fragment,s),u(R.$$.fragment,s),u(N.$$.fragment,s),u(I.$$.fragment,s),u(j.$$.fragment,s),u(z.$$.fragment,s),u(T.$$.fragment,s),u(J.$$.fragment,s),u(U.$$.fragment,s),u(K.$$.fragment,s),u(S.$$.fragment,s),u(Q.$$.fragment,s),es=!1},d(s){s&&p(n),s&&p(_),s&&p(E),s&&p(r),s&&p(g),C(k),s&&p(ts),C(O,s),s&&p(h),C(q),C(P),s&&p(rs),C(G,s),s&&p(Z),s&&p(Ds),C(L,s),s&&p(x),C(R),C(N),s&&p(cs),C(I,s),s&&p(is),C(j,s),s&&p(ss),s&&p(ys),C(z,s),s&&p(B),C(T),C(J),s&&p($s),C(U,s),s&&p(fs),C(K,s),s&&p(M),C(S),s&&p(ms),C(Q,s)}}}function Ls(t,n,a){let l;return Rs(t,Is,_=>a(0,l=_)),[l]}class Xs extends xs{constructor(n){super(),Bs(this,n,Ls,Gs,ks,{})}}export{Xs as default};
