import{S as ts,i as ps,s as rs,e as U,t as y,k as W,w as f,c as z,a as G,h as $,d as o,m as Y,x as C,b as S,g as r,M as A,y as m,j as Ds,q as u,o as d,B as _,_ as cs,E as is}from"../../../chunks/index-fdc571c5.js";import{f as ys}from"../../../chunks/scroll-fc938a7a.js";import{C as V}from"../../../chunks/CodeFence-bf275b3f.js";import{C as as}from"../../../chunks/CodeInline-03f5d050.js";import{L as j}from"../../../chunks/Link-d2aa795f.js";import{A as $s}from"../../../chunks/Admonition-ec3c5d9c.js";import"../../../chunks/singletons-01f6dffe.js";import"../../../chunks/contexts-ecb88871.js";function fs(p){let n;return{c(){n=y("limitations")},l(e){n=$(e,"limitations")},m(e,a){r(e,n,a)},d(e){e&&o(n)}}}function Cs(p){let n,e,a,g,D,b,c;return a=new j({props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#things_that_dont_work_with_structured_clone",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[fs]},$$scope:{ctx:p}}}),D=new as({props:{code:"JSON.stringify"}}),{c(){n=U("p"),e=y("There are "),f(a.$$.fragment),g=y(" to what can be sent via channels. Generally, if the value is seralizable via "),f(D.$$.fragment),b=y(" it should work for this Event too.")},l(t){n=z(t,"P",{});var i=G(n);e=$(i,"There are "),C(a.$$.fragment,i),g=$(i," to what can be sent via channels. Generally, if the value is seralizable via "),C(D.$$.fragment,i),b=$(i," it should work for this Event too."),i.forEach(o)},m(t,i){r(t,n,i),A(n,e),m(a,n,null),A(n,g),m(D,n,null),A(n,b),c=!0},p(t,i){const h={};i&2&&(h.$$scope={dirty:i,ctx:t}),a.$set(h)},i(t){c||(u(a.$$.fragment,t),u(D.$$.fragment,t),c=!0)},o(t){d(a.$$.fragment,t),d(D.$$.fragment,t),c=!1},d(t){t&&o(n),_(a),_(D)}}}function ms(p){let n,e;return n=new as({props:{code:"Event"}}),{c(){f(n.$$.fragment)},l(a){C(n.$$.fragment,a)},m(a,g){m(n,a,g),e=!0},p:is,i(a){e||(u(n.$$.fragment,a),e=!0)},o(a){d(n.$$.fragment,a),e=!1},d(a){_(n,a)}}}function us(p){let n;return{c(){n=y("Broadcast Channel API")},l(e){n=$(e,"Broadcast Channel API")},m(e,a){r(e,n,a)},d(e){e&&o(n)}}}function ds(p){let n;return{c(){n=y("#")},l(e){n=$(e,"#")},m(e,a){r(e,n,a)},d(e){e&&o(n)}}}function _s(p){let n;return{c(){n=y("#")},l(e){n=$(e,"#")},m(e,a){r(e,n,a)},d(e){e&&o(n)}}}function gs(p){let n;return{c(){n=y("#")},l(e){n=$(e,"#")},m(e,a){r(e,n,a)},d(e){e&&o(n)}}}function hs(p){let n,e=p[0].title+"",a,g,D,b,c,t,i,h,X,k,Z,J,F,q,ss,K,H,v,N,ns,Q,I,w,B,es,R,x,M,O;return D=new $s({props:{type:"warning",$$slots:{default:[Cs]},$$scope:{ctx:p}}}),t=new as({props:{code:"channel"}}),h=new j({props:{href:"/references/utilities/events-event",$$slots:{default:[ms]},$$scope:{ctx:p}}}),k=new j({props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[us]},$$scope:{ctx:p}}}),q=new j({props:{class:"header-anchor",href:"#imports","aria-hidden":"true",$$slots:{default:[ds]},$$scope:{ctx:p}}}),H=new V({props:{lang:"typescript",ext:"ts",linesCount:2,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">channel</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),N=new j({props:{class:"header-anchor",href:"#definitions","aria-hidden":"true",$$slots:{default:[_s]},$$scope:{ctx:p}}}),I=new V({props:{lang:"typescript",ext:"ts",linesCount:9,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">interface</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">IChannelEvent</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt; </span><span style="color: #569CD6">extends</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">IEvent</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt; {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">close</span><span style="color: #D4D4D4">(): </span><span style="color: #4EC9B0">void</span><span style="color: #D4D4D4">;</span></span>
<span class="line"><span style="color: #D4D4D4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">channel</span><span style="color: #D4D4D4">: &lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt;(</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">channel</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">BroadcastChannel</span><span style="color: #D4D4D4"> | </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">,</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">start</span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0">IEventNotifier</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt;</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">IChannelEvent</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt;;</span></span>
<span class="line"></span></code></pre>`}}),B=new j({props:{class:"header-anchor",href:"#usage","aria-hidden":"true",$$slots:{default:[gs]},$$scope:{ctx:p}}}),x=new V({props:{title:"app.js",lang:"typescript",ext:"ts",linesCount:15,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">channel</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">channel</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;my-channel&quot;</span><span style="color: #D4D4D4">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">destroy</span><span style="color: #D4D4D4"> = </span><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">subscribe</span><span style="color: #D4D4D4">((</span><span style="color: #9CDCFE">detail</span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">({</span><span style="color: #9CDCFE">detail</span><span style="color: #D4D4D4">}); </span><span style="color: #6A9955">// \`{detail: &quot;Goodbye World!&quot;}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #6A9955">// NOTE: Make sure to call \`.close\` whenever you&#39;re done with a</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #6A9955">// channel, so it can be garbage collected</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">close</span><span style="color: #D4D4D4">();</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">destroy</span><span style="color: #D4D4D4">();</span></span>
<span class="line"><span style="color: #D4D4D4">});</span></span>
<span class="line"></span>
<span class="line"><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">postMessage</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;Hello World&quot;</span><span style="color: #D4D4D4">);</span></span>
<span class="line"></span></code></pre>`}}),M=new V({props:{title:"worker.js",lang:"typescript",ext:"ts",linesCount:13,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">channel</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;svelte/store&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA">channel</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;my-channel&quot;</span><span style="color: #D4D4D4">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">destroy</span><span style="color: #D4D4D4"> = </span><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">subscribe</span><span style="color: #D4D4D4">((</span><span style="color: #9CDCFE">detail</span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">({</span><span style="color: #9CDCFE">detail</span><span style="color: #D4D4D4">}); </span><span style="color: #6A9955">// \`{detail: &quot;Hello World!&quot;}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">postMessage</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;Goodbye World&quot;</span><span style="color: #D4D4D4">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #4FC1FF">MY_CHANNEL</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">close</span><span style="color: #D4D4D4">();</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">destroy</span><span style="color: #D4D4D4">();</span></span>
<span class="line"><span style="color: #D4D4D4">});</span></span>
<span class="line"></span></code></pre>`}}),{c(){n=U("h1"),a=y(e),g=W(),f(D.$$.fragment),b=W(),c=U("p"),f(t.$$.fragment),i=y(" is an "),f(h.$$.fragment),X=y(" that wraps around the "),f(k.$$.fragment),Z=y("."),J=W(),F=U("h2"),f(q.$$.fragment),ss=y(" Imports"),K=W(),f(H.$$.fragment),v=U("h2"),f(N.$$.fragment),ns=y(" Definitions"),Q=W(),f(I.$$.fragment),w=U("h2"),f(B.$$.fragment),es=y(" Usage"),R=W(),f(x.$$.fragment),f(M.$$.fragment),this.h()},l(s){n=z(s,"H1",{});var l=G(n);a=$(l,e),l.forEach(o),g=Y(s),C(D.$$.fragment,s),b=Y(s),c=z(s,"P",{});var E=G(c);C(t.$$.fragment,E),i=$(E," is an "),C(h.$$.fragment,E),X=$(E," that wraps around the "),C(k.$$.fragment,E),Z=$(E,"."),E.forEach(o),J=Y(s),F=z(s,"H2",{id:!0,tabindex:!0});var L=G(F);C(q.$$.fragment,L),ss=$(L," Imports"),L.forEach(o),K=Y(s),C(H.$$.fragment,s),v=z(s,"H2",{id:!0,tabindex:!0});var P=G(v);C(N.$$.fragment,P),ns=$(P," Definitions"),P.forEach(o),Q=Y(s),C(I.$$.fragment,s),w=z(s,"H2",{id:!0,tabindex:!0});var T=G(w);C(B.$$.fragment,T),es=$(T," Usage"),T.forEach(o),R=Y(s),C(x.$$.fragment,s),C(M.$$.fragment,s),this.h()},h(){S(F,"id","imports"),S(F,"tabindex","-1"),S(v,"id","definitions"),S(v,"tabindex","-1"),S(w,"id","usage"),S(w,"tabindex","-1")},m(s,l){r(s,n,l),A(n,a),r(s,g,l),m(D,s,l),r(s,b,l),r(s,c,l),m(t,c,null),A(c,i),m(h,c,null),A(c,X),m(k,c,null),A(c,Z),r(s,J,l),r(s,F,l),m(q,F,null),A(F,ss),r(s,K,l),m(H,s,l),r(s,v,l),m(N,v,null),A(v,ns),r(s,Q,l),m(I,s,l),r(s,w,l),m(B,w,null),A(w,es),r(s,R,l),m(x,s,l),m(M,s,l),O=!0},p(s,[l]){(!O||l&1)&&e!==(e=s[0].title+"")&&Ds(a,e);const E={};l&2&&(E.$$scope={dirty:l,ctx:s}),D.$set(E);const L={};l&2&&(L.$$scope={dirty:l,ctx:s}),h.$set(L);const P={};l&2&&(P.$$scope={dirty:l,ctx:s}),k.$set(P);const T={};l&2&&(T.$$scope={dirty:l,ctx:s}),q.$set(T);const ls={};l&2&&(ls.$$scope={dirty:l,ctx:s}),N.$set(ls);const os={};l&2&&(os.$$scope={dirty:l,ctx:s}),B.$set(os)},i(s){O||(u(D.$$.fragment,s),u(t.$$.fragment,s),u(h.$$.fragment,s),u(k.$$.fragment,s),u(q.$$.fragment,s),u(H.$$.fragment,s),u(N.$$.fragment,s),u(I.$$.fragment,s),u(B.$$.fragment,s),u(x.$$.fragment,s),u(M.$$.fragment,s),O=!0)},o(s){d(D.$$.fragment,s),d(t.$$.fragment,s),d(h.$$.fragment,s),d(k.$$.fragment,s),d(q.$$.fragment,s),d(H.$$.fragment,s),d(N.$$.fragment,s),d(I.$$.fragment,s),d(B.$$.fragment,s),d(x.$$.fragment,s),d(M.$$.fragment,s),O=!1},d(s){s&&o(n),s&&o(g),_(D,s),s&&o(b),s&&o(c),_(t),_(h),_(k),s&&o(J),s&&o(F),_(q),s&&o(K),_(H,s),s&&o(v),_(N),s&&o(Q),_(I,s),s&&o(w),_(B),s&&o(R),_(x,s),_(M,s)}}}function Es(p,n,e){let a;return cs(p,ys,g=>e(0,a=g)),[a]}class Bs extends ts{constructor(n){super(),ps(this,n,Es,hs,rs,{})}}export{Bs as default};
