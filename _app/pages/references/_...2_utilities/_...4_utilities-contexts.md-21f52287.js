import{S as ss,i as ns,s as es,e as S,t as D,k as M,w as u,c as X,a as Y,h as i,d as t,m as N,x as _,b as j,g as o,M as B,y as d,j as as,q as g,o as E,B as x,_ as ts}from"../../../chunks/index-fdc571c5.js";import{f as ls}from"../../../chunks/scroll-fc938a7a.js";import{C as V}from"../../../chunks/CodeFence-bf275b3f.js";import{C as Z}from"../../../chunks/CodeInline-03f5d050.js";import{L as W}from"../../../chunks/Link-d2aa795f.js";import"../../../chunks/singletons-01f6dffe.js";import"../../../chunks/contexts-ecb88871.js";function os(p){let e;return{c(){e=D("Svelte Context")},l(n){e=i(n,"Svelte Context")},m(n,l){o(n,e,l)},d(n){n&&t(e)}}}function ps(p){let e;return{c(){e=D("#")},l(n){e=i(n,"#")},m(n,l){o(n,e,l)},d(n){n&&t(e)}}}function rs(p){let e;return{c(){e=D("#")},l(n){e=i(n,"#")},m(n,l){o(n,e,l)},d(n){n&&t(e)}}}function cs(p){let e,n=p[0].title+"",l,b,y,U,C,z,I,c,f,G,H,k,r,m,J,v,L,A,$,K,F,Q,P,h,O;return C=new W({props:{href:"https://svelte.dev/docs#run-time-svelte-setcontext",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[os]},$$scope:{ctx:p}}}),f=new W({props:{class:"header-anchor",href:"#imports","aria-hidden":"true",$$slots:{default:[ps]},$$scope:{ctx:p}}}),k=new V({props:{lang:"typescript",ext:"ts",linesCount:2,code:`<pre><code><span class="line"><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">make_scoped_context</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span></code></pre>`}}),m=new W({props:{class:"header-anchor",href:"#make-scoped-context","aria-hidden":"true",$$slots:{default:[rs]},$$scope:{ctx:p}}}),v=new Z({props:{code:"make_scoped_context"}}),A=new V({props:{lang:"typescript",ext:"ts",linesCount:14,code:`<pre><code><span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">interface</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">IContextScope</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt; {</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">key</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">get</span><span style="color: #D4D4D4">(): </span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4"> | </span><span style="color: #4EC9B0">undefined</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">has</span><span style="color: #D4D4D4">(): </span><span style="color: #4EC9B0">boolean</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #DCDCAA">set</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">value</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4"> | </span><span style="color: #4EC9B0">undefined</span><span style="color: #D4D4D4">): </span><span style="color: #4EC9B0">void</span><span style="color: #D4D4D4">;</span></span>
<span class="line"><span style="color: #D4D4D4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">make_scoped_context</span><span style="color: #D4D4D4">: &lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt;(</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">identifier</span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span></span>
<span class="line"><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">IContextScope</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">T</span><span style="color: #D4D4D4">&gt;;</span></span>
<span class="line"></span></code></pre>`}}),F=new Z({props:{code:"IContextScope"}}),h=new V({props:{lang:"svelte",ext:"svelte",linesCount:13,code:`<pre><code><span class="line"><span style="color: #808080">&lt;</span><span style="color: #569CD6">script</span><span style="color: #808080">&gt;</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> {</span><span style="color: #9CDCFE">make_scoped_context</span><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;@svelte-in-motion/utilities&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF">MY_CONTEXT</span><span style="color: #D4D4D4"> =</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #DCDCAA">make_scoped_context</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;my-context&quot;</span><span style="color: #D4D4D4">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #4FC1FF">MY_CONTEXT</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">set</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;some text&quot;</span><span style="color: #D4D4D4">); </span><span style="color: #6A9955">// equivalent to \`setContext(MY_CONTEXT.key, &quot;some text&quot;);\`</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #4FC1FF">MY_CONTEXT</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">get</span><span style="color: #D4D4D4">()); </span><span style="color: #6A9955">// \`some text\`, equivalent to \`console.log(getContext(MY_CONTEXT.key));\`</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE">console</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">log</span><span style="color: #D4D4D4">(</span><span style="color: #4FC1FF">MY_CONTEXT</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">has</span><span style="color: #D4D4D4">()); </span><span style="color: #6A9955">// \`true\`, equivalent to \`console.log(hasContext(MY_CONTEXT.key));\`</span></span>
<span class="line"><span style="color: #808080">&lt;/</span><span style="color: #569CD6">script</span><span style="color: #808080">&gt;</span></span>
<span class="line"></span></code></pre>`}}),{c(){e=S("h1"),l=D(n),b=M(),y=S("p"),U=D("Helper utilities for handling "),u(C.$$.fragment),z=D(" related tasks are provided."),I=M(),c=S("h2"),u(f.$$.fragment),G=D(" Imports"),H=M(),u(k.$$.fragment),r=S("h2"),u(m.$$.fragment),J=M(),u(v.$$.fragment),L=M(),u(A.$$.fragment),$=S("p"),K=D("Returns an "),u(F.$$.fragment),Q=D(" instance for more easily coordinating a Context key."),P=M(),u(h.$$.fragment),this.h()},l(s){e=X(s,"H1",{});var a=Y(e);l=i(a,n),a.forEach(t),b=N(s),y=X(s,"P",{});var T=Y(y);U=i(T,"Helper utilities for handling "),_(C.$$.fragment,T),z=i(T," related tasks are provided."),T.forEach(t),I=N(s),c=X(s,"H2",{id:!0,tabindex:!0});var w=Y(c);_(f.$$.fragment,w),G=i(w," Imports"),w.forEach(t),H=N(s),_(k.$$.fragment,s),r=X(s,"H2",{id:!0,tabindex:!0});var q=Y(r);_(m.$$.fragment,q),J=N(q),_(v.$$.fragment,q),q.forEach(t),L=N(s),_(A.$$.fragment,s),$=X(s,"P",{});var R=Y($);K=i(R,"Returns an "),_(F.$$.fragment,R),Q=i(R," instance for more easily coordinating a Context key."),R.forEach(t),P=N(s),_(h.$$.fragment,s),this.h()},h(){j(c,"id","imports"),j(c,"tabindex","-1"),j(r,"id","make-scoped-context"),j(r,"tabindex","-1")},m(s,a){o(s,e,a),B(e,l),o(s,b,a),o(s,y,a),B(y,U),d(C,y,null),B(y,z),o(s,I,a),o(s,c,a),d(f,c,null),B(c,G),o(s,H,a),d(k,s,a),o(s,r,a),d(m,r,null),B(r,J),d(v,r,null),o(s,L,a),d(A,s,a),o(s,$,a),B($,K),d(F,$,null),B($,Q),o(s,P,a),d(h,s,a),O=!0},p(s,[a]){(!O||a&1)&&n!==(n=s[0].title+"")&&as(l,n);const T={};a&2&&(T.$$scope={dirty:a,ctx:s}),C.$set(T);const w={};a&2&&(w.$$scope={dirty:a,ctx:s}),f.$set(w);const q={};a&2&&(q.$$scope={dirty:a,ctx:s}),m.$set(q)},i(s){O||(g(C.$$.fragment,s),g(f.$$.fragment,s),g(k.$$.fragment,s),g(m.$$.fragment,s),g(v.$$.fragment,s),g(A.$$.fragment,s),g(F.$$.fragment,s),g(h.$$.fragment,s),O=!0)},o(s){E(C.$$.fragment,s),E(f.$$.fragment,s),E(k.$$.fragment,s),E(m.$$.fragment,s),E(v.$$.fragment,s),E(A.$$.fragment,s),E(F.$$.fragment,s),E(h.$$.fragment,s),O=!1},d(s){s&&t(e),s&&t(b),s&&t(y),x(C),s&&t(I),s&&t(c),x(f),s&&t(H),x(k,s),s&&t(r),x(m),x(v),s&&t(L),x(A,s),s&&t($),x(F),s&&t(P),x(h,s)}}}function Ds(p,e,n){let l;return ts(p,ls,b=>n(0,l=b)),[l]}class _s extends ss{constructor(e){super(),ns(this,e,Ds,cs,es,{})}}export{_s as default};
